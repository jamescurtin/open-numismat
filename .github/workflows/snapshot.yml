name: "Snapshot"

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - 'OpenNumismat/resources/i18n/*'
      - 'icons/*'
      - 'OpenNumismat/resources/resources.qrc'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  title:
    name: Title
    runs-on: ubuntu-latest
    outputs:
      APPNAME: OpenNumismat
      VERSION: ${{ steps.bump.outputs.current-version }}.${{ steps.bump.outputs.current-release }}
      PACKAGENAME: OpenNumismat-${{ steps.bump.outputs.current-version }}.${{ steps.bump.outputs.current-release }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install bump-my-version==0.32.1
    - name: Get current version
      id: bump
      shell: bash
      run: |
        echo "current-version=$(bump-my-version show current_version)" >> $GITHUB_OUTPUT
        echo "current-release=$(bump-my-version show scm_info.distance_to_latest_tag)" >> $GITHUB_  
  
  macos:
    needs: [title]
    name: macOS
    runs-on: macos-13
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    - uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - name: install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install bump-my-version==0.32.1 pyinstaller
    - name: Bump pre-release version
      run: |
        bump-my-version bump pre --no-commit --allow-dirty --verbose --serialize "{major}.{minor}.{patch}.{distance_to_latest_tag}"
    - name: Create private keys
      run: |
        touch OpenNumismat/private_keys.py
        echo "COLNECT_PROXY = '${{ secrets.COLNECT_PROXY }}'" >> OpenNumismat/private_keys.py
        echo "COLNECT_KEY = '${{ secrets.COLNECT_KEY }}'" >> OpenNumismat/private_keys.py
        echo "NUMISTA_API_KEY = '${{ secrets.NUMISTA_API_KEY }}'" >> OpenNumismat/private_keys.py
        echo "MAPBOX_ACCESS_TOKEN = '${{ secrets.MAPBOX_ACCESS_TOKEN }}'" >> OpenNumismat/private_keys.py
    - name: build
      run: |
        PYTHONOPTIMIZE=1
        pyinstaller open-numismat.spec
    - name: package
      run: |
        cd dist
        mkdir vol
        mv OpenNumismat.app vol
        ln -s /Applications vol/Applications
        hdiutil create ${{ needs.title.outputs.PACKAGENAME }}-macos13.dmg -volname "${{ needs.title.outputs.PACKAGENAME }}" -srcfolder vol -fs HFSX -format UDZO -imagekey zlib-level=9
    - name: upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.title.outputs.PACKAGENAME }}-dmg
        path: dist/${{ needs.title.outputs.PACKAGENAME }}-macos13.dmg
        if-no-files-found: error

  macos-arm64:
    needs: [title]
    name: macOS arm64
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: 0
    - uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - name: install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install bump-my-version==0.32.1 pyinstaller
    - name: Bump pre-release version
      run: |
        bump-my-version bump pre --no-commit --allow-dirty --verbose --serialize "{major}.{minor}.{patch}.{distance_to_latest_tag}"
    - name: Create private keys
      run: |
        touch OpenNumismat/private_keys.py
        echo "COLNECT_PROXY = '${{ secrets.COLNECT_PROXY }}'" >> OpenNumismat/private_keys.py
        echo "COLNECT_KEY = '${{ secrets.COLNECT_KEY }}'" >> OpenNumismat/private_keys.py
        echo "NUMISTA_API_KEY = '${{ secrets.NUMISTA_API_KEY }}'" >> OpenNumismat/private_keys.py
        echo "MAPBOX_ACCESS_TOKEN = '${{ secrets.MAPBOX_ACCESS_TOKEN }}'" >> OpenNumismat/private_keys.py
    - name: build
      run: |
        PYTHONOPTIMIZE=1
        pyinstaller open-numismat.spec
    - name: package
      run: |
        cd dist
        mkdir vol
        mv OpenNumismat.app vol
        ln -s /Applications vol/Applications
        hdiutil create ${{ needs.title.outputs.PACKAGENAME }}-macos14-arm64.dmg -volname "${{ needs.title.outputs.PACKAGENAME }}" -srcfolder vol -fs HFSX -format UDZO -imagekey zlib-level=9
    - name: upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.title.outputs.PACKAGENAME }}-dmg-arm64
        path: dist/${{ needs.title.outputs.PACKAGENAME }}-macos14-arm64.dmg
        if-no-files-found: error

  prerelease:
    name: Create pre-release
    needs: [title, macos, macos-arm64]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: release
      id: release
      uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: "${{ secrets.PAT }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
    - name: upload-macos
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: artifacts/${{ needs.title.outputs.PACKAGENAME }}-dmg/${{ needs.title.outputs.PACKAGENAME }}-macos13.dmg
        asset_name: ${{ needs.title.outputs.PACKAGENAME }}-macos13.dmg
        asset_content_type: application/octet-stream
    - name: upload-macos-arm64
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: artifacts/${{ needs.title.outputs.PACKAGENAME }}-dmg-arm64/${{ needs.title.outputs.PACKAGENAME }}-macos14-arm64.dmg
        asset_name: ${{ needs.title.outputs.PACKAGENAME }}-macos14-arm64.dmg
        asset_content_type: application/octet-stream
